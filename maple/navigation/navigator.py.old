
from maple.navigation.rrt_path import RRTPath
from maple.utils import pytransform_to_tuple, carla_to_pytransform
from maple.navigation.drive_control import angle_helper
from maple.navigation.static_path_planning import generate_spiral
from pytransform3d.transformations import concat

class Navigator:
    """Provides the goal linear and angular velocity for the rover"""

    """
    This code uses a global pre planed path that is made at the start and should never be changed (compile_time_path)
    Will traveling if there are sections that are goal points that cant be reached they are removed in this path (real_time_path)
    To get from point to point a rrt path will be used (rrt_path)
    """

    def __init__(self, agent):
        """Create the navigator.

        Args:
            agent: The Agent instance
        """

        self.agent = agent
        # This is the start location for the rover
        self.rover_initial_position = carla_to_pytransform(agent.get_initial_position())

        # This is the start location for the lander
        lander_rover = carla_to_pytransform(agent.get_initial_lander_position())
        self.lander_initial_position = concat(lander_rover, self.rover_initial_position)

        # IMPORTANT NOTE:
        # These are the obstacles to avoid
        # It is a list of tuples with x, y, and radius
        # This will soon be a parameter
        self.lander_x, self.lander_y, _, _, _, _ = pytransform_to_tuple(self.lander_initial_position)
        self.lander_obstacle = (self.lander_x, self.lander_y, 3)
        self.obstacles = [self.lander_obstacle]

        # This is how far from our current rover position along the path that we want to be the point our rover is trying to go to
        self.radius_from_goal_location = .5

        # This is the speed we are set to travel at (.48m/s is max linear and 4.13rad/s is max angular)
        self.goal_speed = .3
        self.goal_hard_turn_speed = .3

        # IMPORTNAT TODO: Remove this initialization while also pathing
        # This is the location we are trying to get to on navigationr
        self.goal_loc = (0, 0) # IMPORTANT NOTE: This is for testing purpoese, will need to change

        ##### spiral path #####
        # This is the point we are trying to get to using the rrt along with a path to that point
        self.rrt_path = None
        self.rrt_goal_loc = None # IMPORTANT NOTE: This is different than self.goal_loc because this is the goal location along the rrt path to get to self.goal_loc

        # This is the global path, DO NOT CHANGE IT!!
        self.global_path = generate_spiral(self.lander_x, self.lander_y)
        self.global_path_index_tracker = 0
        ##### spiral path #####

        # ##### lawnmower path #####
        # # This is the point we are trying to get to using the rrt along with a path to that point
        # self.rrt_path = None
        # self.rrt_goal_loc = None # IMPORTANT NOTE: This is different than self.goal_loc because this is the goal location along the rrt path to get to self.goal_loc

        # # This is the global path, DO NOT CHANGE IT!!
        # # self.global_path = generate_spiral(self.lander_x, self.lander_y)
        # self.global_path = generate_lawnmower(self.lander_x, self.lander_y)

        # # print("global path: ", self.global_path)
        # self.global_path_index_tracker = 0
        # ##### lawnmower path #####


    def get_all_goal_locations(self):
        return self.global_path

    def add_large_boulder_detection(self, detections):
        self.obstacles.extend(detections)

    def get_obstacle_locations(self):
        return self.obstacles

    def get_next_goal_location(self, rover_x, rover_y):
        # NOTE: This function just loops through the global path

        # Update the index in a loop to allways have a point
        self.global_path_index_tracker = (self.global_path_index_tracker + 1) % len(self.global_path)

        # Goal loc
        goal_loc = self.global_path[self.global_path_index_tracker]

        # # Loop until we find a point we can make it to
        # while not self.rrt_path.is_possible_to_reach(*goal_loc, self.obstacles):
        #     print(f'the index is {self.global_path_index_tracker} the len is {len(self.global_path)}')
        #     # Update the index in a loop to allways have a point
        #     self.global_path_index_tracker = (self.global_path_index_tracker + 1) % len(self.global_path)
        #     print(f'the goal loc is {goal_loc}')
        #     # Goal loc
        #     goal_loc = self.global_path[self.global_path_index_tracker]
        #     print(f'the obstacles are {self.obstacles}')

        return goal_loc
    
    def get_goal_loc(self):
        return self.goal_loc

    def __call__(self, pytransform_position):
        """Equivalent to calling `get_lin_vel_ang_vel`."""
        return self.get_lin_vel_ang_vel(pytransform_position)
    
    def get_lin_vel_ang_vel(self, pytransform_position, obstacles=None, attempt=0):
        """
        Takes the position and returns the linear and angular goal velocity.
        Uses an iterative approach with fallback strategies to prevent recursion issues.
        
        Args:
            pytransform_position: Current position of the rover
            obstacles: List of obstacles to avoid
            attempt: Internal counter to prevent infinite loops
            
        Returns:
            Tuple of (linear_velocity, angular_velocity)
        """

        # Prevent infinite loops
        if attempt >= 5:
            print("WARNING: Maximum attempts reached, using emergency fallback")
            # Emergency fallback: turn in place then try to move slightly
            return (0.1, 0.5)
            
        # Update obstacles
        if obstacles is not None:
            self.obstacles = [o for o in obstacles]
            if self.lander_obstacle not in self.obstacles:
                self.obstacles.append(self.lander_obstacle)
        
        # Get the goal speed
        current_goal_speed = self.goal_speed
        
        try:
            # Extract the position information
            rover_x, rover_y, _, _, _, rover_yaw = pytransform_to_tuple(pytransform_position)
            
            # Check if there will be a collision on the path, if so get rid of this one
            if self.rrt_path is not None and not self.rrt_path.is_path_collision_free(self.obstacles):
                self.rrt_path = None
            
            # Check if we have an rrt path and make one if we don't have one
            if self.rrt_path is None:
                self.rrt_path = RRTPath([(rover_x, rover_y), self.goal_loc], self.obstacles)
            
            # Check if it is possible to reach our goal location
            if not self.rrt_path.is_possible_to_reach(*self.goal_loc, self.obstacles):
                # Try a new goal location without recursion
                self.goal_loc = self.get_next_goal_location(rover_x, rover_y)
                self.rrt_path = None
                
                # Instead of recursion, increment attempt counter and try again
                return self.get_lin_vel_ang_vel(pytransform_position, obstacles, attempt + 1)
            
            # Get the next path along the rrt path
            self.rrt_goal_loc = self.rrt_path.traverse((rover_x, rover_y), self.radius_from_goal_location)
            
            # If no goal location (we made it there), pick new one
            if self.rrt_goal_loc is None:
                self.goal_loc = self.get_next_goal_location(rover_x, rover_y)
                self.rrt_path = None
                
                # Instead of recursion, increment attempt counter and try again
                return self.get_lin_vel_ang_vel(pytransform_position, obstacles, attempt + 1)
            
            # Follow the rrt path
            rrt_goal_x, rrt_goal_y = self.rrt_goal_loc
            current_goal_ang = angle_helper(rover_x, rover_y, rover_yaw, rrt_goal_x, rrt_goal_y)
            
            # Check if we need to do a tight turn then override goal speed
            if abs(current_goal_ang) > 0.1:
                current_goal_speed = self.goal_hard_turn_speed
            
            print(f"the rover position is {rover_x} and {rover_y}")
            print(f"the new goal location is {self.goal_loc}")
            print(f'the goal location along the rrt path is {self.rrt_goal_loc}')
            print(f"the goal ang is {current_goal_ang}")
            
            # Success!
            return (current_goal_speed, current_goal_ang)
            
        except Exception as e:
            print(f"Navigation error: {e}")
            
            # Try one of several fallback strategies
            if attempt == 0:
                # First fallback: try with just the lander as an obstacle
                print("Trying fallback with just lander obstacle")
                self.obstacles = [self.lander_obstacle]
                return self.get_lin_vel_ang_vel(pytransform_position, self.obstacles, attempt + 1)
            elif attempt == 1:
                # Second fallback: try with a new goal location
                print("Trying fallback with new goal location")
                rover_x, rover_y, _, _, _, _ = pytransform_to_tuple(pytransform_position)
                self.goal_loc = self.get_next_goal_location(rover_x, rover_y)
                self.rrt_path = None
                return self.get_lin_vel_ang_vel(pytransform_position, self.obstacles, attempt + 1)
            elif attempt == 2:
                # Third fallback: try with a simpler path planning approach
                print("Trying emergency direct path")
                rover_x, rover_y, _, _, _, rover_yaw = pytransform_to_tuple(pytransform_position)
                # Simple emergency path - move away from current location
                emergency_x = rover_x + 2.0
                emergency_y = rover_y + 2.0
                emergency_ang = angle_helper(rover_x, rover_y, rover_yaw, emergency_x, emergency_y)
                return (0.2, emergency_ang)  # Slow speed for safety
            else:
                # Last resort: rotate in place to find a clear path
                print("CRITICAL: Using last resort movement")
                return (0.0, 0.5)  # Rotate in place at a moderate speed
            

    def get_rrt_waypoints(self):
        """
        Return the full list of waypoints from the current RRT path, if it exists.
        This can be useful for visualization or debugging.
        
        Returns:
            A list of (x, y) tuples representing the current planned path,
            or an empty list if there is no valid path.
        """
        if self.rrt_path is None:
            return []
        
        # Depending on your RRTPath implementation, you might do:
        #   return self.rrt_path.get_full_path()
        # or
        #   return self.rrt_path.nodes
        #
        # If `RRTPath` has no built-in method, you can store the path in a variable
        # in `RRTPath` after construction or after planning. Here, let's assume
        # there's a `get_full_path()` method for demonstration:
        
        return self.rrt_path.get_full_path()
